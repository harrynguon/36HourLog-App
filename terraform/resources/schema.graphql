# Use subscriptions for large objects, small changes or extremely low latency apps
schema {
  query: Query
  mutation: Mutation
}

type Query {
  getItem(input: AllFieldsInput): Item
  listItems(filter: TableItemFilterInput): ItemList
}

type Mutation {
  createItem(input: AllFieldsInput): Item
  updateItem(input: AllFieldsInput): Item
  deleteItem(input: AllFieldsInput): Item
}

type Item {
  DeviceID: String!
  ExpiryDate: String!
  Description: String
}

type ItemList {
  Items: [Item]!
}

input AllFieldsInput {
  DeviceID: String!
  ExpiryDate: String!
  Description: String!
}

input TableItemFilterInput {
  DeviceID: TableStringFilterInput
}

input TableStringFilterInput {
  ne: String
  eq: String
}